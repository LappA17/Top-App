import { ButtonHTMLAttributes, DetailedHTMLProps, ReactNode } from 'react';

export interface ButtonProps
	extends Omit<
		DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>,
		'onAnimationStart' | 'onDragStart' | 'onDragEnd' | 'onDrag' | 'ref'
	> {
	children: ReactNode; //что бы во внутрь можно было прокинуть какой-то текст
	appearance: 'primary' | 'ghost'; //кнопка может быть двух видов: праймери и гост
	arrow?: 'right' | 'down' | 'none'; //так как большинство кнопок у нас без стрелки мы сделаем arrow необязательным
}

//DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement> === DetailedHTMLProps<A<T>, T>
//Теперь мы посмотрим что из себя представляет эта запись, мы берём DetailedHTMLProps и теперь обозначим его Дженерики в виде букв DetailedHTMLProps<A<T>, T>, теперь мы понимаем что DetailedHTMLProps - это дженерик, который принимает два параметра, причем первый параметр А у нас тоже является дженериком который принимает в себя Т при чем этот Т должен быть равен второму аргументу Т

//Если мы зайдем в документацию ТС то мы увидем записать type DetailedHTMLProps<E extends HTMLAttributes<T>, T> = ClassAttributes<T> & E  это значит что мы увидем туже самую запись которую мы написали более кратко, некоторый Е который наследуется хтмлаттрибут от Т, и Т который по сути тоже у нас Дженерик от Т, в результате этого типа мы получаем классовые аттрибуты ClassAttributes<T> и то что у нас есть в Е

//HTMLAttributes - это хтмлатрибуты которые нам необходимо иметь в типах для того что бы понимать что мы имеет доступ к какому-то свойству, например className. У него есть и lang и title и тд, те все хтмлатрибуты которые нам могут понадобится в реакте. И в данном случае наш html props говорит что мы лолжны передать какой-то элемент который экстендит этот хтмлатрибут и возможно его как-то дополняет + какой-то Т

//Теперь перейдем к описанию что мы написали, мы взяли вот этот тип DetailedHTMLProps и туда первым элементом передали ButtonHTMLAttributes, это хтмлаттрибут который является специфичным именно для кнопки, в документации ButtonHTMLAttributes<T> extends HTMLAttributes<T> (те наследуется от хтмл аттрибутов)  и имеет свои специфичные поля, к примеру form к который он относится, свой тип(ресет, сабмит или баттон) и тд. Причем всех этих свойств не должно быть к примеру у параграфа, у него свои свойства. По-этому в данном случае когда мы указываем ButtonHTMLAttributes мы говорим что у нас первый элемент в который будет обернут наше компонент - это будет баттон, у которого будут все свойства кнопки

//Теперь что такое HTMLButtonElement ? Если мы на него нажмем то мы увидим HTMLButtonElement extends HTMLElement. Там у нас будут пустые Объекты, которые каким-то образом связаны с lib домом там как-то будут пустые интерфейсы элементом, и это все как-то взаимодействует и получаем правильные свойства наших htmlэлементом

// Эту запись некоторые люди записывают по разному DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>. Мы так можем экстендить не только кнопку, так же мы можем выбрать любой нужный нам дом элемент, что бы проверить какие нужно зайти node_modules -> types -> react -> index.d.ts. Передав нужный хтмлаттрибут мы получаем нужные нам правильные свойства к которым мы сможем обращаться

// Теперь что мы передаем сюда HTMLButtonElement. Идем node_modules -> types -> react -> global.d.ts. Здесь мы увидим все что нам необходимо, не только даже html но и svg, все те элементы - это пустые интерфейсы которые нам помагают лучше типизировать
//Мы можем указать что внутри будет не Баттон а параграф DetailedHTMLProps<HTMLAttributes<HTMLParagraphElement>, HTMLParagraphElement> , что мы здесь написали ? Так как у параграфа нет никаких специальных свойств то мы заменили с ButtonHTMLAttributes на HTMLAttributes, а вместо HTMLButtonElement соотвественно на HTMLParagraphElement

//По-этому мы сначало смотри есть ли у нас специализируемые htmlаттрибуты типа ButtonHTMLAttributes(это есть для баттон, для формы и тд), ищем в node_modules -> types -> react -> index.d.ts, а потом подставляем правильный, корректный html элемент типа HTMLButtonElement или HTMLParagraphElement, те любой элемент который нам предоствляют с помощью lib дома. И важно понимать что DetailedHTMLProps мы используем всегда ! А внутрянку уже настраиваем под соотвествующие элементы и его аттрибуты
