import { GetStaticProps } from 'next';
import React, { useState } from 'react';
import { Button, Htag, Input, P, Rating, Tag, Textarea } from '../components';
import { withLayout } from '../layout/Layout';
import axios from 'axios';
import { MenuItem } from '../interfaces/menu.interface';
import { API } from '../helpers/api';
import Error from 'next/error';
import { Error404 } from './404';

function Home({ menu }: HomeProps): JSX.Element {
	const [rating, setRating] = useState<number>(4);

	//return <Error statusCode={404} />; //дефолтная 404 ошибка от Некста
	//return <Error404 />; //а это наша оши
	return (
		<>
			<Htag tag="h1">Заголовок</Htag>
			<Button appearance="primary" arrow="right">
				Кнопка
			</Button>
			<Button appearance="ghost" arrow="down">
				Кнопка
			</Button>
			<P size="l">Большой</P>
			<P>Средний</P>
			<P size="s">Маленький</P>
			<Tag size="s">Ghost</Tag>
			<Tag size="m" color="red">
				Red
			</Tag>
			<Tag size="s" color="green">
				Green
			</Tag>
			<Tag color="primary">Green</Tag>
			<Rating rating={rating} isEditable setRating={setRating} />
			<Input placeholder="тест" />
			<Textarea placeholder="тест area" />
		</>
	);
}

export default withLayout(Home);

export const getStaticProps: GetStaticProps<HomeProps> = async () => {
	const firstCategory = 0;
	const { data: menu } = await axios.post<MenuItem[]>(API.topPage.find, {
		firstCategory,
	});
	return {
		props: {
			menu,
			firstCategory,
		},
	};
};

interface HomeProps extends Record<string, unknown> {
	menu: MenuItem[];
	firstCategory: number;
}

// Hook userEffect позволяет выполнять побочные эффекты, в рамках жизненного цикла нашего Компонента. Мы пустой массив зависимостей передаем в редких случаях, эти случае: 1) это во-первых при mount, когда нам нужно что бы Компонент только появился в ДОМ дереве, в таком случае будет выполнен только один раз при первичном Маунте компонента. 2) когда мы ничего не передаем тогда при любом перерендере будет выполнятся useEffect(те еффект тригерится на абсолютно любой рендеринг страницы, и важно понимать что он это делает ассинхроно, он не будет ждать сначала перерендеринга и только потом свой рендер). 3) мы можем передать пустой массив зависимостей в случае unmount - когда Компонент уходит из страницы(удаляется).
// В остальный случаях мы передаем массив зависимостей тот элемент за которым еффект начинает следить и в случае его изменение выполнять перерендеринг

// Пишу этот коментарий после создание const withLayout - Компонента Высшего Порядка. Сейчас мы экспортим дефолтный Компонент Home export default function Home(). По экспорт дефолт Некст у нас понимает что это точка входа в рендер странички и в его прирендере на сервер-сайде и соотвествено находит, пополняет этот Компонент по пути Слеш, потому что это индексная страница. Что бы это все использовать с Layout мы должны модифицировать эту страницу, мы будем эеспортировать дефолтно не сам Компонент, а этот Компонент в обертке export default withLayout(Home), те теперь обертка НОС

// Наша фция getStaticProps будет возвращать Пропсы, состоящие из наших элементов меню
// Для http запросов будем использовать axios потому что она очень хорошо типизированна и имеет много наворочень
// У нас эта страница будет отностся к категории 0, то-есть мы всегда знаем заведомо что здесь должно зарендерится меню категории 0, по-этому создадим нашу первую категорию
// const {} = здесь получаем результат запроса. Мы в нашем постзапросе используем домен того апи откуда будем брать информацию, мы обращаемся к переменной окружение
// мы с нашего апи берем только data: menu, и мы это menu помещаем в props: и в просы еще засовываем firstCategory - она пригодится для отображения меню в дальнейшем
// создадим папку interface и menu.interface файл для типизации нашего фронта
// после того как мы задали типизацию - мы указываем что в axios.post мы получаем <MenuItem[]>
// interface HomeProps {} - затипизиурем все возвращаемое наше значение. И подставляем в GetStaticProps<HomeProps>

//Теперь у нас в function Home({menu, firstCategory}) доступны все наши пропсы

// Но наш withLayout(Home) подсвечивает ошибку, потому что он не ожидает таких пропсов. Решает проблему interface HomeProps extends Record<string, unknown>

// Теперь мы отрендерили категории на страницы, нам они пришли с Бека. То-есть мы получили их в рамках Сервер Сайд Рендеринга, мы их передали и оно теперь на фронте. Но самое интересное в коде страницы, у нас все эти аналитика, бизнес, дизайн и тд присутствуют в исходном коде страницы - это означает что поисковики которые зайдут на эту страницу их увидят. Так же есть параметр __Next__Data__ - это начальные данные, которые к нам пришли для того что бы потом когда у нас уже отработает js - мы могли провести гидротацию, эти изначальные данные приходят в виде json и лежат в скрипте

//
//Теперь поговорим о getStaticPaths. Нам будут приходить данные: это будет опять же меню, потому что мы должны рендерить меню на любой странице, потом информация о странице(мобильность, вакансие и прочье) и третье дополнительная информация о продуктах и отзывах о них
