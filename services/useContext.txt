Передача данных через Пропс
Допустим у нас есть Компонент на 1 этаже на 2 и на 3, мы на 3 можем передать только через 2, а если хотим с 3го на первый то тоже через второй
Представим что нам нужно отоброзить данные в верхней панеле, а верхняя панель вообще лежит в layout, то нам нужно было бы сначала кидать с 1го на 2ой потом на 3ий и с 3го уже в другой ветке на 2ой

Передача через Context
Нам нужно передать с 1го сразу в 3ий, а он уже(этот третий) передаст в другую ветку на второй этаж. То-есть мы с 1а передаем в 3, а он в 2b
                                                        3  
                                                      2a 2b
                                                    1a     1b
Используя пропсы нам бы пришлось с 1а-2а-3-2b
Как работает контекст ? Мы оборачивае корневой Компонент контекстом(наш 3) и дальше мы можем передавать переменные вызывая соотвествующие функции который этот контекст возвращает и принимать данные из этого контекста, фактически 3 - это наш посредник контейнер куда мы кладем данные и забераем

Как создать контекст
export interface IMyContext {
    test:number
}
export const MyContext = createContext<IMyContext>({ test: 1 })

Cоздание провайдера
export const MyContextProvider = ({ test: children }: IMyContext & { children: ReactNode }) => {
    return <MyContext.Provider value={ test }>
        {children}
    </MyContext.Provider>
}
Что такое Провайдер ? Это обёртка, которая позволяет обертывать наши Компоненты в Контекст(в корень нашего Компонента). В примере мы видим провайдер в качестве Компонент - это нам дает что внутри этого провайдера мы можем использовать все те же стейты и эффекты, для того что бы обрабатывать события, если нам не нужна какая-то обертка, то мы можем не использовать Компонент, а просто обернуть в корневом Компоненте. Результат работы Провайдера должен быть MyContext.Provider который оборачивает children

Получение Контекста в Компоненте
export const myComponent = () => {
    const { test } = useContext(MyContext)
}
test - данные Контекста
MyContext - контекст для получения данных

Дополнительные возможности
<MyContext.Consumer>
    { value => Отрендерить что-то используя значение контекста}
</MyContext.Consumer>
MyContext.Consumer - позволяет динамически получать значения контекста и что-то отрендерить. Из-за useContext MyContext.Consumer почти не используется

MyContext.displayName = 'MyContextName' - возможность задание именни что бы смотреть в ДевТулсах

Если мы используем Редакс то скорее всего useContext не понадобится

В SSR useContext будет исполнятся до того когда мы отдадим его на Фронт - это означает что переданные значение через useContext будут отображаться у нас в прирендере, это нам позволяет передавать данные которые к нам пришли в какой-то Компонент через useContext даже на этапе рендеринга Компонента