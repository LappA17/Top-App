import styles from './Menu.module.scss';
import cn from 'classnames';
import { useContext, KeyboardEvent, useState } from 'react';
import { AppContext } from '../../context/app.context';
import { FirstLevelMenuItem, PageItem } from '../../interfaces/menu.interface';
import Link from 'next/link';
import { useRouter } from 'next/router';
import { firstLevelMenu } from '../../helpers/helpers';
import { motion, useReducedMotion } from 'framer-motion';

export const Menu = (): JSX.Element => {
	const { menu, setMenu, firstCategory } = useContext(AppContext);
	const [announce, setAnnounce] = useState<'closed' | 'opened' | undefined>(undefined);
	const shouldReduceMotion = useReducedMotion();
	const router = useRouter();

	const variants = {
		visible: {
			marginBottom: 20,
			transition: shouldReduceMotion
				? {}
				: {
						when: 'beforeChildren',
						staggerChildren: 0.1,
				  },
		},
		hidden: { marginBottom: 0 },
	};

	const variantsChildren = {
		visible: {
			opacity: 1,
			height: 29,
		},
		hidden: { opacity: shouldReduceMotion ? 1 : 0, height: 0 },
	};

	const openSecondLevel = (secondCategory: string) => {
		setMenu &&
			setMenu(
				menu.map(m => {
					if (m._id.secondCategory == secondCategory) {
						setAnnounce(m.isOpened ? 'closed' : 'opened');
						m.isOpened = !m.isOpened;
					}
					return m;
				})
			);
	};

	const openSecondLevelKey = (key: KeyboardEvent, secondCategory: string) => {
		if (key.code == 'Space' || key.code == 'Enter') {
			key.preventDefault();
			openSecondLevel(secondCategory);
		}
	};

	const buildFirstLevel = () => {
		return (
			<ul className={styles.firstLevelList}>
				{firstLevelMenu.map(m => (
					<li key={m.route} aria-expanded={m.id == firstCategory}>
						<Link href={`/${m.route}`}>
							<a>
								<div
									className={cn(styles.firstLevel, {
										[styles.firstLevelActive]: m.id == firstCategory,
									})}
								>
									{m.icon}
									<span>{m.name}</span>
								</div>
							</a>
						</Link>
						{m.id == firstCategory && buildSecondLevel(m)}
					</li>
				))}
			</ul>
		);
	};

	const buildSecondLevel = (menuItem: FirstLevelMenuItem) => {
		return (
			<ul className={styles.secondBlock}>
				{menu.map(m => {
					if (m.pages.map(p => p.alias).includes(router.asPath.split('/')[2])) {
						m.isOpened = true;
					}
					return (
						<li key={m._id.secondCategory}>
							<button
								tabIndex={0}
								onKeyDown={(key: KeyboardEvent) => openSecondLevelKey(key, m._id.secondCategory)}
								className={styles.secondLevel}
								onClick={() => openSecondLevel(m._id.secondCategory)}
								aria-expanded={m.isOpened}
							>
								{m._id.secondCategory}
							</button>
							<motion.ul
								layout
								variants={variants}
								initial={m.isOpened ? 'visible' : 'hidden'}
								animate={m.isOpened ? 'visible' : 'hidden'}
								className={styles.secondLevelBlock}
							>
								{buildThirdLevel(m.pages, menuItem.route, m.isOpened ?? false)}
							</motion.ul>
						</li>
					);
				})}
			</ul>
		);
	};

	const buildThirdLevel = (pages: PageItem[], route: string, isOpened: boolean) => {
		return pages.map(p => (
			<motion.li key={p._id} variants={variantsChildren}>
				<Link href={`/${route}/${p.alias}`}>
					<a
						tabIndex={isOpened ? 0 : -1}
						className={cn(styles.thirdLevel, {
							[styles.thirdLevelActive]: `/${route}/${p.alias}` == router.asPath,
						})}
						aria-current={`/${route}/${p.alias}` == router.asPath ? 'page' : false}
					>
						{p.category}
					</a>
				</Link>
			</motion.li>
		));
	};

	return (
		<nav className={styles.menu} role="navigation">
			{announce && (
				<span role="log" className="visualyHidden">
					{announce === 'opened' ? 'развёрнуто' : 'свёрнуто'}
				</span>
			)}
			{buildFirstLevel()}
		</nav>
	);
};

//Теперь используем хук useContext который мы передали через context.provider в наше меню. Создадим пока что наше меню внутри sidebar. Создадим Menu в корни для того что бы мы могли ссылаться из обоих Компонентов
// что бы получить данные мы используем const {} = useContext(AppContext) и обрати внимание что мы используем не Провайдер, а именно Контекст
// И теперь вставим наше меню в Sidebar

/* Представим что мы хотим сделать и обновить меню. К примеру мы бы в каком-то Компоненте по эффекту хотели бы обновить меню
useEffect(() => {
    setMenu && setMenu()
}) 
Когда заходим на страницу то у нас меню пропало, потому что мы при первой загрузки в эффекте сразу обновили меню, но в исходном коде это меню все равно осталось, потому что любые useEffect будут возникать только на клиенте после того как нам уже прилетело приложение, прилетел js bundle и гидротировался. Именно по-этому если бы мы хотели установить какое-то значение в контекст динамически, то оно бы не как не работало на этапе прирендера, по-этому мы используем дефолтную передачу, то-есть когда мы получили пропсы и прокинули их в контекст как начальное значение. Тогда они у нас будут в рендере */

//
// У нас в меню идет три уровня самого этого меню. Первый уровень это сервисы, продукты книги и курсы. Второй - это то что выпадает - это дизайн, фотошоп и тд. И третий уровень - это уже то что внутри
// По-этому Антон сказал что в таких случаях лучше не пихать все в один рендер, а разбить на разные подфункции build...
// Мы все равно можем вызвать построение функции первого уровня в начале

// Этот див у которого className={cn(styles.firstLevel, будет активный класс. Это означает что у нас firstLevelActive когда айди меню совпадает с категорией. То-есть тогда когда мы находимся в той же категории где и айди меню, то это меню должно быть активно и отображаться

//Второй уровень мы должны построить после отображения первого уровня, но перед тем как у нас закрылся наш роут, по-этому мы в первом увроне вызываем фцию построения второго уровня и только в том случае что у нас это меню открыто  menu.id == firstCategory

//У нас третий блок сразу начинается под вторым и он у нас может быть открытым. Но у нас сейчас никак не хватает информации или меню открыто, по-этому добавим в interface MenuItem новое свойство isOpened
//[styles.secondLevelBlockOpened]: m.isOpened - будет означать что оно открыто

// Нам нужно иметь Роут где мы сейчас находимся(в каком из розделова продуктс или сервис и тд), потому что url для элементов внутри(фотошоп, фигма) должны быть   /courses/photoshop. По-этому нам нужно понимать что там будут действительно courses
//По-этому мы должны передать в третий левел странички pages: PageItem[] и route в качестве стринги что бы мы плюсовали его к нашему Роуту route: string

// {buildThirdLevel(m.pages, menuItem.route)} - что бы при вызове третьего списка нам прокинуть в него route - нам нужно при вызове в buildSecondLevel(menu)поместить меню как аргумент, а при создание самой функции второго левела поместить menuItem типа FirstLevelMenuItem

// <a href={`/${route}/${p.alias}`}> там где роут - это будет наш первый уровень там где courses

// Кроме этого нужно сделать нужного нам цвета выделения

// [styles.thirdLevelActive]: - здесь мы будем сравнивать с текущим роутом и уже на основание этого назначать класс активности

// мы в конце для избежания конфликта пересичение имен заменили firstLevelMenu.map(m с menu на m

// <div className={styles.secondBlock}> мы создали этот класс этому блоку что бы появилась линия которая отгораживает первый блок от второго

//
// const router = useRouter() мы будем использовать роутер активно в 3 уровне меню. Во-первых, нам нужно скрыть третий уровень если мы находимся не в нём по умолчанию. Во-вторых нам нужно выделить активным то меню где мы сейчас находимся
//переходим на второй уровень, и вот здесь нам нужно правильно проверку на isOpen, то-есть нам нужно передать isOpen тру только тем где у нас сейчас есть Линк страницы.
//для этого поменяем скобки в map c () на {} и напишем ретерн и в него поместим уже () скобки. Насолько я понял когда мы в map вместо {} пишем () то это автоматически понимается как return, а если уже написали {} то нужно руками прописать return
// if (m.pages.map(p => p.alias)) - так мы оставили только массив страниц
// if (m.pages.map(p => p.alias).includes(router.asPath.split('/')[2])) если эта проверка проходит то мы должны получить страницы которые содержит этот url
//создадим в css .secondLevelBlock и ему display: none; и создали .secondBlockOpened и ему призначали display: block. И теперь скрыется всё кроме текущего

// Переходим в Третий блок и пишем, что если у нас `/${route}/${p.alias}` == router.asPath, то-есть если у мы находимя именно на том блоке, то мы предоставляем его как выделеным

// const openSecondLever - мы сюда должны передать айдишник второй категории или название и должны обновить меню
// в setMenu мы должны взять меню, пройтись по нему, и поставить open по тому по которому мы кликнули
// setMenu && setMenu - так мы обеспечим что не было undefined у setMenu

//мы наш openSecondLever будем вызывать при нажатие на второй уровень
//делаем onClick на <div className={styles.secondLevel}>
// openSecondLever(m._id.secondCategory) - внутри мы указали категорию

//
// { [styles.secondLevelBlockOpened]: m.isOpened } мы удалим это у корневого уровня(помни что там три уровня), потому что нам не нужня привязка к Опенду, те мы сейчас никак не будем различать закрыт блок или открыт с помощью css, все будет происходить только с помощью анимации
/* Этот див 
<div className={cn(styles.secondLevelBlock)}>
	{buildThirdLevel(m.pages, menuItem.route)}
</div>
является родителем для третьего уровня, те для buildThirdLevel и мы обернем этот див в motion тем самым говоря что здесь будет анимация*/

// С какой проблемой мы бы столкнулись если бы хотели сделать анимацию на css(наше левое меню), как только мы бы хотели сделать что бы этот элемент показывался или не показывался под css - нам нужно будет ставить максимальную высоту типа 100vh и при схлопывание 0, соотвественно мы должны регулировать высоту корневого элемента, благодаря тому что мы имеем возможность в моушине опперировать layout - мы можем сказать что верхней элемент должен анимироваться при изменение layout, те когда появляются верхние элементы, то мы можем без проблем анимировать его верхний элементы дива, по-этому мы сразу в наш motion добавляем layout
// Создадим variants и так как нам по умолчанию нужно это все анимировать с помощью layout то нам не нужно задавать никакие доп вещи с точки зрение высоты элемента, нам нужно задать поведение детей

/* Так как у нас нет больше класса opened то мы не должны его больше иметь в css и мы удаляем 
.secondLevelBlockOpened {
	display: block;
}

.secondLevelBlockOpened:last-child {
	margin-bottom: 20px;
}
Тут важно обратить внимание что он нам давал margin-bottom: 20px; и что бы эти 20 пикспелей остались мы добавим их в variant и скажем что когда он скрытый то 0 а когда отображается то 20 */
// Удаляем display:none у .secondLevelBlock в css потому что мы теперь все далем благодаря нашей анимации

//наш animate в motion.div должен базироваться на состояние нашего скрытого меню

//Займемся 3 уровнем, обернем Link в motion.div так же обрати внимание что мы переносим ключ на корневой элемент key={p._id} с link на motion.div
//Создадим варианты под него variantsChildren и варианты будут такие же по приччине того что мы сможем отнаследоваться состоянием visible или hidden от верхних вариантов
//Всё работатет, но есть одна проблема, когда элементы скрытые то у нас огромные дыры между Вторым заголовками(там где аналитика, дизайн и тд), эти дырки там по приччине того что элементы хоть и hidden но они все еще есть на странице, высота каждого элемента 29px и они создают эти дырки, что бы их не было мы скажем что когда элементы visible то их высота 29px а когда скрытые то 0
//Но теперь у нас появилась еще одна проблема - когда мы нажимаем на Бизнес то нас перекидывает на машиное обучение, почему ? Потому что у нас хоть и элементы скрыты но у них есть тег a(ссылка), а оно имеет свою высоту и она перекрывает Бизнес, по-этому нужно сделать overflow: hidden у нашего .secondLevelBlock в css и тогда элемент который НЕВИДЕН не будет клибельный нам для нажатия

// Последняя проблема - когда мы перезагружаем страницу то у нас меню по-дефолту скрыто и только через пару секунд открывается, по приччине того что при рендере мы получаем другую страницу от той что покажется пользователю, это легко исправить заменив в div который secondLevel в motion.div initial на m.isOpened ? 'visible' : 'hidden' потому что мы его определяем так же как и состояние для анимации

//
// Когда мы начали тестить доступнотсь с класиаутры у нас не корректно работала подсветка в каком меню мы находимся + были перескоки с раздели на раздел + мы могли залезить в закрытое меню которое визуально было не открыто но мы туда попали
//Заходим во Второй уровень и добавим tabIndex, tabIndex принимает два значения, если 0 - это значит что табИндекс будет доступен с клавиатуры и будет расспологаться в том порядке в котором расспологается наш layout, то-есть если перед ним есть тоже какой-то элемент с табиндексом 0, то он будет идти за ним.
//ТабИндекс -1 означатет - что элемент не будет никогда доступен с клавиатуры
//ТабИндекс больше 0 означает что он будет показываться первее табиндекса 0 или с меньшем значением

//Навешали tabIndex именно не на блок а на сам элемнет и что бы можно было открыть с пробела меню нам нужно создать фцию onKeyDown
//она принимает key типа keyboardkey который мы импорнули из Реакта
//openSecondLevelKey(key, m._id.secondCategory)} и после нажатие мы будем запускать эту новую фцию, которая принимает key и то что она должна открыть(а открыть она должна вторую категорию)

// После того как мы создали фцию openSecondLevelKey и мы на сайте постарались открыть меню, у нас все открылось но возникла проблема что после нажатия на кнопку мы по какой-то приччине проскоролились, а проскролились потому что мы не предотвратили дефолтное поведение key.preventDefault()

// Теперь решим проблему что после того как мы переходим на бизнес - мы попадаем в первый блок, нам нужно сказать что если у нас блок - закрытый то мы не может табаться по этому элементу, те сделать табИндекс -1. Для этого передаем в buildThirdLevel isOpened
// вешамем на а следующее tabIndex={isOpened ? 0 : -1} - если открыт то 0, а если закрыт то -1

//
// return <nav className={styles.menu}>{buildFirstLevel()}</nav> вместо дива сделали nav для лучшей работы скринлидера
// <nav className={styles.menu} role="navigation"> мы добавили роли для лучшей работы скрин ридера, потому что есть НЕСКОЛЬКО СКРИН РИДЕРОВ

//
//Сейчас СкринРидер говорит при попадение на КУРСЫ что это навигация,курсы,ссылка. Проблема в том что скринредире не видет сервисы, книги и продукты. Так же не понятно что он открыт, если мы перейдем ниже то у нас будет вложенная структура ! Для этого сделать ul, li - упорядочных списков либо маркерованных либо нет, потому что когда мы переделаем на списки то это будет читаться совершенно по другому
// После того как мы сделали ul, li вместо фрагмента и дива, то скринридер уже говорит что в курсы вложенно еще 4 элемента
// <li key={m.route} aria-expanded={m.id == firstCategory}> - означает что у нас этот ли ОТКРЫТ когда выполняется вот это {m.id == firstCategory}

//Во-втором блоке поменяли дивы на ul и li.
//В третьем уровне вложения мы поменяли дивы на li и во втором урвоне там где оно оборачивается с  motion.div на motion.ul

// У нас все равно есть ошибки, если мы нажмем к примеру на бизнес, то скрин ридер скажет что это пункт списка, но проблема в том что не говорит открыт или закрыт в ХромВокс, все это рпоисходит что во втором блоке у нас просто Див, так как это просто див то мы не получаем никакой доп инфы относительно этого элемента и area-expanded не воспринимает на груперовочных элементах типа дива, по-этому вместо Дива, даже если мы сделаем aria-expanded={} , по-этому сделаем button !

// Создадим стейт const [announce, setAnnounce] = useState<'closed' | 'opened' | undefined>(undefined);, то-есть он принимает три значения
// {announce && <span role='log' className='visualyHidden'>{announce === 'opened' ? 'развёрнуто' : 'свёрнуто'}</span>} - роль лог будет анонсировать при изменение, оно не будет себя вести как алерт, а просто будет говорить то что внутри данного элемента. Теперь когда мы будем менять announce в рамках какого-то значение, сразу появляется span и так как роль у него лог то скринридер начинает озвучивать что внутри, но при этом этот спан скрыт
// Где мы будем это тригерить ? У нас есть фция openSecondLevel и в тот момент, когда мы находим нужный айдишник, то мы можем сделать setAnnoucer(если m.isOpened). setAnnounce(m.isOpened ? 'closed': 'opened') почему на оборот ? потому что мы потом меняем значения на оборот

//теперь стилизуем наши новые ul и li

// aria-current={`/${route}/${p.alias}` == router.asPath ? 'page' : false} войсОвер будет говорить просмотрена страница текущая ссылка и название страницы
